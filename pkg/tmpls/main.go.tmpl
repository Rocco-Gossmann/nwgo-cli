package main

import (
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"time"

	"%%GOPackageName%%/goapi"
)

var port int = 7000
var server *http.Server = nil

func killServer(w http.ResponseWriter, r *http.Request) {

	w.Write([]byte(`<!DOCTYPE html>
		<script type="text/javascript"> window.setTimeout(() => window.close(), 100); </script>
	`))

	go func() {
		time.Sleep(750 * time.Millisecond)
		if server != nil {
			server.Shutdown(nil)
		}
	}()
}

func initServer(w http.ResponseWriter, r *http.Request) {
	r.URL.Path = "/"
	server.Handler.ServeHTTP(w, r)
}

func buildAddr() int {
	port += 1
	return port
}

func main() {

	mux := http.NewServeMux()
	mux.Handle("GET /static/", http.StripPrefix("/static/", http.FileServer(http.Dir("./static"))))
	mux.HandleFunc("GET /__start_server__", initServer)
	mux.HandleFunc("GET /__stop_server__", killServer)
	goapi.DefineRoutes(mux)

	tries := 0

	var portChannel chan int = make(chan int)

port_search_loop:
	for tries < 99 {

		tries += 1

		go func(portout chan int) {

			port := buildAddr()
			line, err := net.Listen("tcp", fmt.Sprintf("127.0.0.1:%d", port))

			if err == nil {

				err = line.Close()
				if err != nil {
					panic(err)
				}

				portout <- port

				server = &http.Server{
					Addr:    fmt.Sprintf("127.0.0.1:%d", port),
					Handler: mux,
				}

				server.ListenAndServe()
				server.Close()

			}

			portout <- 0

		}(portChannel)

		port := <-portChannel

		switch port {
		default:
			fmt.Print(port)
			break port_search_loop

		case 0:
			continue

		}

	}

	if tries >= 99 {
		log.Print("try limit reached, there does not seem to be a free port in the range of 7001 to 7099")
		os.Exit(2)
	}

	<-portChannel
}
